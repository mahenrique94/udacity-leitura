import { messages } from '../pt'

describe('Tests for portuguese messages', () => {

    const { pt: { translations } } = messages

    it('Smoke tests', () => {
        expect(translations.buttons).toBeDefined()
        expect(translations.buttons.backHome).toBeDefined()
        expect(translations.buttons.cancel).toBeDefined()
        expect(translations.buttons.keep).toBeDefined()
        expect(translations.buttons.keep.reading).toBeDefined()
        expect(translations.buttons.no).toBeDefined()
        expect(translations.buttons.save).toBeDefined()
        expect(translations.buttons.yes).toBeDefined()
        expect(translations.describes).toBeDefined()
        expect(translations.describes.app).toBeDefined()
        expect(translations.form).toBeDefined()
        expect(translations.form.errors).toBeDefined()
        expect(translations.form.errors.required).toBeDefined()
        expect(translations.label).toBeDefined()
        expect(translations.label.author).toBeDefined()
        expect(translations.label.body).toBeDefined()
        expect(translations.label.category).toBeDefined()
        expect(translations.label.orderBy).toBeDefined()
        expect(translations.label.title).toBeDefined()
        expect(translations.languages).toBeDefined()
        expect(translations.languages.english).toBeDefined()
        expect(translations.languages.portuguese).toBeDefined()
        expect(translations.menu).toBeDefined()
        expect(translations.menu.categories).toBeDefined()
        expect(translations.menu.home).toBeDefined()
        expect(translations.menu.language).toBeDefined()
        expect(translations.menu.posts).toBeDefined()
        expect(translations.menu.title).toBeDefined()
        expect(translations.messages).toBeDefined()
        expect(translations.messages.confirm).toBeDefined()
        expect(translations.messages.confirm.api).toBeDefined()
        expect(translations.messages.confirm.api.delete).toBeDefined()
        expect(translations.notifications).toBeDefined()
        expect(translations.notifications.messages).toBeDefined()
        expect(translations.notifications.messages.api).toBeDefined()
        expect(translations.notifications.messages.api.posts).toBeDefined()
        expect(translations.notifications.messages.api.posts.saved).toBeDefined()
        expect(translations.notifications.titles).toBeDefined()
        expect(translations.notifications.titles.error).toBeDefined()
        expect(translations.notifications.titles.success).toBeDefined()
        expect(translations.texts).toBeDefined()
        expect(translations.texts.date).toBeDefined()
        expect(translations.texts.score).toBeDefined()
        expect(translations.texts.selectOrder).toBeDefined()
        expect(translations.titles).toBeDefined()
        expect(translations.titles.app).toBeDefined()
        expect(translations.titles.page).toBeDefined()
        expect(translations.titles.page.notFound).toBeDefined()
    })

    it('Should match with each translation message', () => {
        expect(translations.buttons.backHome).toEqual('Voltar para a página principal')
        expect(translations.buttons.cancel).toEqual('Cancelar')
        expect(translations.buttons.keep.reading).toEqual('Continuar lendo')
        expect(translations.buttons.no).toEqual('Não')
        expect(translations.buttons.save).toEqual('Salvar')
        expect(translations.buttons.yes).toEqual('Sim')
        expect(translations.describes.app).toEqual(`É um aplicativo para criar e compartilhar conteúdo através de posts,
                    também é possível realizar comentários e votação para avaliar os melhores.`)
        expect(translations.form.errors.required).toEqual('Preenchimento do campo é obrigatório')
        expect(translations.label.author).toEqual('Autor')
        expect(translations.label.body).toEqual('Conteúdo')
        expect(translations.label.category).toEqual('Categoria')
        expect(translations.label.orderBy).toEqual('Ordenar por')
        expect(translations.label.title).toEqual('Título')
        expect(translations.languages.english).toEqual('Inglês')
        expect(translations.languages.portuguese).toEqual('Português')
        expect(translations.menu.categories).toEqual('Categorias')
        expect(translations.menu.home).toEqual('Home')
        expect(translations.menu.language).toEqual('Idioma')
        expect(translations.menu.posts).toEqual('Posts')
        expect(translations.menu.title).toEqual('leitura')
        expect(translations.messages.confirm.api.delete).toEqual('Você tem certeza que deseja deletar o registro? Essa operação é PERMANENTE!')
        expect(translations.notifications.messages.api.posts.saved).toEqual('Um novo post foi salvo com sucesso')
        expect(translations.notifications.titles.error).toEqual('Erro')
        expect(translations.notifications.titles.success).toEqual('Sucesso')
        expect(translations.texts.date).toEqual('Data')
        expect(translations.texts.score).toEqual('Pontuação')
        expect(translations.texts.selectOrder).toEqual('Selecione uma ordenação')
        expect(translations.titles.app).toEqual('Leitura')
        expect(translations.titles.page.notFound).toEqual('Página não encontrada')
    })

})
