import { messages } from '../en'

describe('Tests for english messages', () => {

    const { en: { translations } } = messages

    it('Smoke tests', () => {
        expect(translations.buttons).toBeDefined()
        expect(translations.buttons.backHome).toBeDefined()
        expect(translations.buttons.cancel).toBeDefined()
        expect(translations.buttons.keep).toBeDefined()
        expect(translations.buttons.keep.reading).toBeDefined()
        expect(translations.buttons.no).toBeDefined()
        expect(translations.buttons.save).toBeDefined()
        expect(translations.buttons.yes).toBeDefined()
        expect(translations.describes).toBeDefined()
        expect(translations.describes.app).toBeDefined()
        expect(translations.form).toBeDefined()
        expect(translations.form.errors).toBeDefined()
        expect(translations.form.errors.required).toBeDefined()
        expect(translations.label).toBeDefined()
        expect(translations.label.author).toBeDefined()
        expect(translations.label.body).toBeDefined()
        expect(translations.label.category).toBeDefined()
        expect(translations.label.orderBy).toBeDefined()
        expect(translations.label.title).toBeDefined()
        expect(translations.languages).toBeDefined()
        expect(translations.languages.english).toBeDefined()
        expect(translations.languages.portuguese).toBeDefined()
        expect(translations.menu).toBeDefined()
        expect(translations.menu.categories).toBeDefined()
        expect(translations.menu.home).toBeDefined()
        expect(translations.menu.language).toBeDefined()
        expect(translations.menu.posts).toBeDefined()
        expect(translations.menu.title).toBeDefined()
        expect(translations.messages).toBeDefined()
        expect(translations.messages.confirm).toBeDefined()
        expect(translations.messages.confirm.api).toBeDefined()
        expect(translations.messages.confirm.api.delete).toBeDefined()
        expect(translations.notifications).toBeDefined()
        expect(translations.notifications.messages).toBeDefined()
        expect(translations.notifications.messages.api).toBeDefined()
        expect(translations.notifications.messages.api.posts).toBeDefined()
        expect(translations.notifications.messages.api.posts.saved).toBeDefined()
        expect(translations.notifications.titles).toBeDefined()
        expect(translations.notifications.titles.error).toBeDefined()
        expect(translations.notifications.titles.success).toBeDefined()
        expect(translations.texts).toBeDefined()
        expect(translations.texts.date).toBeDefined()
        expect(translations.texts.score).toBeDefined()
        expect(translations.texts.selectOrder).toBeDefined()
        expect(translations.titles).toBeDefined()
        expect(translations.titles.app).toBeDefined()
        expect(translations.titles.page).toBeDefined()
        expect(translations.titles.page.notFound).toBeDefined()
    })

    it('Should match with each translation message', () => {
        expect(translations.buttons.backHome).toEqual('Back to home')
        expect(translations.buttons.cancel).toEqual('Cancel')
        expect(translations.buttons.keep.reading).toEqual('Keep reading')
        expect(translations.buttons.no).toEqual('No')
        expect(translations.buttons.save).toEqual('Save')
        expect(translations.buttons.yes).toEqual('Yes')
        expect(translations.describes.app).toEqual(`It's an app to create and share information trought of the posts,
                    it's possible to do comments and votation for the list of the bests.`)
        expect(translations.form.errors.required).toEqual('Fillment of this field it\'s required')
        expect(translations.label.author).toEqual('Author')
        expect(translations.label.body).toEqual('Content')
        expect(translations.label.category).toEqual('Category')
        expect(translations.label.orderBy).toEqual('Order by')
        expect(translations.label.title).toEqual('Title')
        expect(translations.languages.english).toEqual('English')
        expect(translations.languages.portuguese).toEqual('Portuguese')
        expect(translations.menu.categories).toEqual('Categories')
        expect(translations.menu.home).toEqual('Home')
        expect(translations.menu.language).toEqual('Language')
        expect(translations.menu.posts).toEqual('Posts')
        expect(translations.menu.title).toEqual('leitura')
        expect(translations.messages.confirm.api.delete).toEqual('Are you sure that with delete the registry? This action it\'s PERMANENT!')
        expect(translations.notifications.messages.api.posts.saved).toEqual('A new post has been created with success')
        expect(translations.notifications.titles.error).toEqual('Error')
        expect(translations.notifications.titles.success).toEqual('Success')
        expect(translations.texts.date).toEqual('Date')
        expect(translations.texts.score).toEqual('Score')
        expect(translations.texts.selectOrder).toEqual('Select a ordenation')
        expect(translations.titles.app).toEqual('Leitura')
        expect(translations.titles.page.notFound).toEqual('Page not found')
    })

})
